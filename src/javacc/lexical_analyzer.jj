options {
  STATIC = false;
}
PARSER_BEGIN(Scanner)

import java.io.*;

public class Scanner {
    private InputStream inputStream = null;

    public Scanner(String filename) {
        this(System.in);
        try {
            inputStream = new FileInputStream(new File(filename));
            ReInit(inputStream);
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main (String args[]) {

      //Parser initialization
      Scanner jscanner;
      int count_args = args.length;

      if(args.length == 0) {
        System.out.println ("Scanner: Waiting for input ...");
        jscanner = new Scanner(System.in);
      }
      else if(args.length == 1) {
          System.out.println ("Scanner: Reading the file " + args[0] + " ..." );
          try {
              jscanner = new Scanner(new java.io.FileInputStream(args[0]));
              System.out.println ("Scanner: The input was read sucessfully.");
          }
          catch(java.io.FileNotFoundException e) {
              System.out.println ("Scanner: The file " + args[0] + " was not found.");
              return;
          }
      }
      else {
        System.out.println ("Scanner:  You must use one of the following:");
        System.out.println ("\tjava Scanner < file");
        System.out.println ("\tjava Scanner file");
        return ;
      }
      try{
        jscanner.CompUnit();
      }
      catch(ParseException e) {
          System.out.println ("Scanner: There was an error during the parse.");
          System.out.println (e.getMessage());
      }
      catch(TokenMgrError e) {
          System.out.println ("Scanner: There was an error.");
          System.out.println (e.getMessage());
      }
    }
}

PARSER_END(Scanner)

SKIP : {
  " "
| "\t"
| "\n"
| "\r"
| "\f"
| <"rem" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"//" (~["\n","\r"])*>
| <"/*"> : MULTILINE_COMMENT_STATE
}

<MULTILINE_COMMENT_STATE> SKIP : {
  <"*/"> : DEFAULT
| <~[]>
}

//STATIC TOKENS
TOKEN : {
  <INTEGER_CONSTANT: (<PLUS> | <MINUS>)?(<DIGIT>)+>
| <FLOAT_CONSTANT: (<PLUS> | <MINUS>)?(<DIGIT>)+<DOT>(<DIGIT>)+>
| <LOGIC_CONSTANT: "true" | "false" | "-1">
| <STRING_CONSTANT: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n")))* "\"">
| <CHAR_CONSTANT: "'" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n"))) "'">
| <HEXADECIMAL_CONSTANT: "0"("x" | "X")(<LETTER> | <DIGIT>)+>
| <#DIGIT: ["0"-"9"]>

| <O_PAREN: "(">
| <C_PAREN: ")">
| <O_BRACE: "{">
| <C_BRACE: "}">
| <O_BRACKET: "[">
| <C_BRACKET: "]">

| <COMMA: ",">
| <DOT: ".">
| <SEMICOLON: ";">
| <COLON: ":">

| <EQUALS: "=">

| <CMPEQUALS: "==">
| <CMPNEQUALS: "!=">
| <AND: "&&">
| <OR: "||">
| <GTHAN: ">">
| <GETHAN: ">=">
| <LTHAN: "<">
| <LETHAN: "<=">

| <NOT: "!">
| <DIFF: "~">
| <COND: "?">

| <CONCAT: "&">
| <EXCL: "^">
| <UNION: "|">

| <INC: "++">
| <DEC: "--">

| <PLUS: "+">
| <MINUS: "-">
| <MULTIPLY: "*">
| <DIVIDE: "/">
| <MOD: "%">
}

//RESERVED WORDS
TOKEN : {
<ABSTRACT: "abstract">
| <ASSERT: "assert">
| <BOOLEAN: "boolean">
| <BREAK: "break">
| <BYTE: "byte">
| <CASE: "case">
| <CATCH: "catch">
| <CHAR: "char">
| <CLASS: "class">
| <CONST: "const">
| <CONTINUE: "continue">
| <DEFAULTR: "default">
| <DO: "do">
| <DOUBLE: "double">
| <ELSE: "else">
| <ENUM: "enum">
| <FINAL: "final">
| <FINALLY: "finally">
| <FLOAT: "float">
| <FOR: "for">
| <GOTO: "goto">
| <IF: "if">
| <IMPLEMENTS: "implements">
| <EXTENDS: "extends">
| <IMPORT: "import">
| <INSTANCEOF: "instanceof">
| <INT: "int">
| <INTERFACE: "interface">
| <LONG: "long">
| <NATIVE: "native">
| <NEW: "new">
| <NULL: "null">
| <PACKAGE: "package">
| <PRIVATE: "private">
| <PROTECTED: "protected">
| <PUBLIC: "public">
| <RETURN: "return">
| <SHORT: "short">
| <STATIC: "static">
| <STRICTFP: "strictfp">
| <SUPER: "super">
| <SWITCH: "switch">
| <SYNCHRONIZED: "synchronized">
| <THIS: "this">
| <THROW: "throw">
| <THROWS: "throws">
| <TRANSIENT: "transient">
| <TRY: "try">
| <VOID: "void">
| <VOLATILE: "volatile">
| <WHILE: "while">
| <NOTATION: "@"(["a"-"z","A"-"Z","0"-"9"])*>
}

//IDENTIFIER TOKEN
TOKEN : {
 <IDENTIFIER: (<LETTER> | "_")(<LETTER> | <DIGIT> | "_")*>
|  <#LETTER: (["a"-"z","A"-"Z"])>
}

TOKEN : {
<OTHER: ~[]>
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// MAIN UNIT //////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void CompUnit () :
{}
{
    [LOOKAHEAD(2) PackageDecl() ]
    ( ImportDecl() )*
    ( TypeDecl() )*
    <EOF>
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// DECLARATIONS //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PackageDecl():
{}
{
    <PACKAGE> Name() <SEMICOLON>
}

void ImportDecl():
{}
{
    <IMPORT> [<STATIC>] Name() [<DOT> <MULTIPLY>] <SEMICOLON>
}

void TypeDecl():
{}
{
    Modifiers()
    ClassDecl()
}

void ThrowsDecl():
{}
{
    <THROWS> NameList()
}

/////////////////////// Class Declaration
void ClassDecl():
{}
{
    <CLASS>
    <IDENTIFIER>
    ClassBody()
}

void ClassBody():
{}
{
    <O_BRACE>
    ( ClassBodyDecl() )*
    <C_BRACE>
}

void ClassBodyDecl():
{}
{
    Modifiers()
    ( LOOKAHEAD(3)
        ClassDecl() |

        LOOKAHEAD( <IDENTIFIER> <O_PAREN> )
        ConstructorDecl() |

        LOOKAHEAD( ReturnType() <IDENTIFIER> <O_PAREN> )
        MethodDecl() |

        FieldDecl()
    )
}


/////////////////////// Variable Declaration
void LocalVarDecl():
{}
{
    Modifiers() Type() VarDecl() ( <COMMA> VarDecl() )* <SEMICOLON>
}

void VarDecl():
{}
{
    VarDeclID() [ <EQUALS> VarInit() ]
}

void VarDeclID():
{}
{
    <IDENTIFIER> (<O_BRACKET> <C_BRACKET>)*
}

void VarInit():
{}
{
    Expr()
}


/////////////////////// Parameters Declaration
void Parameters():
{}
{
    <O_PAREN>
    [
        Parameter() ( <COMMA> Parameter() )*
    ]
    <C_PAREN>
}

void Parameter():
{}
{
    Modifiers()
    Type()
    <IDENTIFIER>
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// MAIN CLASS DECL //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ConstructorDecl():
{}
{
    <IDENTIFIER> Parameters() [ ThrowsDecl() ]
    <O_BRACE>
    ( CodeBlockStatement() )*
    <C_BRACE>
}

void FieldDecl():
{}
{
    Type() VarDecl() ( <COMMA> VarDecl() )* <SEMICOLON>
}

void MethodDecl():
{}
{
    ReturnType() <IDENTIFIER> Parameters() [ ThrowsDecl() ]
    (
        CodeBlock() |
        <SEMICOLON>
    )
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// CODE BLOCKS //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CodeBlock():
{}
{
    <O_BRACE>
    ( CodeBlockStatement() )*
    <C_BRACE>
}

void CodeBlockStatement():
{}
{
    LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
    LocalVarDecl() |

    LOOKAHEAD(3)
    Statement()
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// TYPES //////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
void Type():
{}
{
   ( LOOKAHEAD(2)
        RefType() |
        PrimitiveType()
   )
}

void RefType():
{}
{
    PrimitiveType() (LOOKAHEAD(2) <O_BRACKET> <C_BRACKET>)+ |
    ClassType() (LOOKAHEAD(2) <O_BRACKET> <C_BRACKET>)*
}

void ClassType():
{}
{
    Name()
}

void PrimitiveType():
{}
{
    <SHORT> |
    <INT> |
    <LONG> |
    <FLOAT> |
    <DOUBLE> |
    <BYTE> |
    <BOOLEAN> |
    <CHAR>
}

void ReturnType():
{}
{
    <VOID> |
    Type()
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// MODIFIERS //////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void Modifiers():
{}
{
    (
        <PUBLIC> |
        <PRIVATE> |
        <PROTECTED> |
        <STATIC> |
        <FINAL> |
        <ABSTRACT> |
        <SYNCHRONIZED> |
        <VOLATILE> |
        <STRICTFP> |
        <TRANSIENT> |
        <NATIVE>
    )*
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// STATEMENTS //////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
void Statement():
{}
{
    StatementExpr() |
    CodeBlock () |
    IFStmt() |
    WHILEStmt() |
    DOWHILEStmt() |
    FORStmt() |
    TRYStmt() |
    ReturnStmt()
}

void AssignOp():
{}
{
    <EQUALS> |
    <PLUS><EQUALS> |
    <MINUS><EQUALS> |
    <MULTIPLY><EQUALS> |
    <DIVIDE><EQUALS>
}

void IFStmt():
{}
{
    <IF> <O_PAREN> Expr() <C_PAREN> Statement()
    [ LOOKAHEAD(1) <ELSE> Statement() ]
}

void WHILEStmt():
{}
{
    <WHILE> <O_PAREN> Expr() <C_PAREN> Statement()
}

void DOWHILEStmt():
{}
{
    <DO> Statement()
    <WHILE> <O_PAREN> Expr() <C_PAREN> <SEMICOLON>
}


/////////////////////// For Statement
void FORStmt():
{}
{
    <FOR>
    <O_PAREN>
    [ FORInit() ] <SEMICOLON> [ Expr() ] <SEMICOLON> [ FORUpdate() ]
    <C_PAREN>
    Statement()
}

void FORInit():
{}
{
    LocalVarDecl()
}

void FORUpdate():
{}
{
    StatementExpr() ( <COMMA> StatementExpr() )*
}
//////

void TRYStmt():
{}
{
    <TRY>
    CodeBlock()
    (
        <CATCH> <O_PAREN> Parameter() <C_PAREN>
        CodeBlock()
    )+

    [ <FINALLY> CodeBlock() ]
}

void ReturnStmt():
{}
{
    <RETURN> [ Expr() ] <SEMICOLON>
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////// EXPRESSIONS ////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void StatementExpr():
{}
{
    PrimaryExpr() [ <INC> | <DEC> | AssignOp() Expr() ] <SEMICOLON>
}

void PrimaryExpr():
{}
{
    PrimaryPrefix()
/*    ( LOOKAHEAD(2)
        PrimarySuffix()
    )**/
}

void PrimaryPrefix():
{}
{
    Literal() |
    Name ()
}

void PrimarySuffix():
{}
{
    Literal() |
    Name ()
}

void Expr():
{}
{
    ConditionalExpr()
    [ LOOKAHEAD(2)
        AssignOp() Expr()
    ]
}

void ConditionalExpr():
{}
{
    ConditionalOrExpr() [ <COND> Expr() <COLON> Expr() ]
}

void ConditionalOrExpr():
{}
{
    ConditionalAndExpr() ( <OR> ConditionalAndExpr() )*
}

void ConditionalAndExpr():
{}
{
    InclusiveOrExpr() ( <AND> InclusiveOrExpr() )*
}

void InclusiveOrExpr():
{}
{
    ExclusiveOrExpr() ( <UNION> ExclusiveOrExpr() )*
}

void ExclusiveOrExpr():
{}
{
    AndExpr() ( <EXCL> AndExpr() )*
}

void AndExpr():
{}
{
    EqualityExpr() ( <CONCAT> EqualityExpr() )*
}

void EqualityExpr():
{}
{
    InstanceOfExpr() ( ( <CMPEQUALS> | <CMPNEQUALS> ) InstanceOfExpr() )*
}

void InstanceOfExpr():
{}
{
    RelationalExpr() [ <INSTANCEOF> Type() ]
}

void RelationalExpr():
{}
{
    AdditiveExpr() ( ( <LTHAN> | <GTHAN> | <LETHAN> | <GETHAN> ) AdditiveExpr() )*
}

void AdditiveExpr():
{}
{
    MultiplicativeExpr() ( ( <PLUS> | <MINUS> ) MultiplicativeExpr() )*
}

void MultiplicativeExpr():
{}
{
    UnaryExpr() ( ( <MULTIPLY> | <DIVIDE> | <MOD> ) UnaryExpr() )*
}

void UnaryExpr():
{}
{
    ( <PLUS> | <MINUS> ) UnaryExpr() |
    PreIncrementExpr() |
    PreDecrementExpr() |
    UnaryExprNotPlusMinus()
}

void PreIncrementExpr():
{}
{
    <INC> PrimaryExpr()
}

void PreDecrementExpr():
{}
{
    <DEC> PrimaryExpr()
}

void UnaryExprNotPlusMinus():
{}
{
    ( <DIFF> | <NOT> ) UnaryExpr() |
    PostfixExpr()
}

void PostfixExpr():
{}
{
    PrimaryExpr() [ <INC> | <DEC> ]
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// MISC //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
void Name():
{}
{
    <IDENTIFIER>
    (LOOKAHEAD(2)
        <DOT> <IDENTIFIER>
    )*
}

void NameList():
{}
{
    Name()
    ( <COMMA> Name() )*
}

void Literal():
{}
{
    <INTEGER_CONSTANT> |
    <FLOAT_CONSTANT> |
    <CHAR_CONSTANT> |
    <STRING_CONSTANT> |
    <LOGIC_CONSTANT> |
    <NULL>
}
