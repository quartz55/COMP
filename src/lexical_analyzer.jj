options {
  IGNORE_CASE = true;
}
PARSER_BEGIN(Scanner)

  public class Scanner {
    public static void main (String args[]) {

      //Parser initialization
      Scanner jscanner;

      if(args.length == 0){
        System.out.println ("Scanner: Waiting for input ...");
        jscanner = new Scanner(System.in);
      }
      else if(args.length == 1){
        System.out.println ("Scanner: Reading the file " + args[0] + " ..." );
        try {
          jscanner = new Scanner(new java.io.FileInputStream(args[0]));
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("Scanner: The file " + args[0] + " was not found.");
          return;
        }
      }
      else {
        System.out.println ("Scanner:  You must use one of the following:");
        System.out.println ("         java Scanner < file");
        System.out.println ("Or");
        System.out.println ("         java Scanner file");
        return ;
      }
      try {
        scanner.Start();
        System.out.println ("Scanner: The input was readed sucessfully.");
      }
      catch(ParseException e){
        System.out.println ("Scanner: There was an error during the parse.");
        System.out.println (e.getMessage());
      }
      catch(TokenMgrError e){
        System.out.println ("Scanner: There was an error.");
        System.out.println (e.getMessage());
      }
    }
  }
PARSER_END(Scanner)

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"rem" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}

//STATIC TOKENS
TOKEN : {
  <INTEGER_CONSTANT: (<PLUS> | <MINUS>)?(<DIGIT>)+>
| <LOGIC_CONSTANT: "true" | "false" | "-1">
| <STRING_CONSTANT: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n")))* "\"">
| <HEXADECIMAL_CONSTANT: "0"("x" | "X")(<LETTER> | <DIGIT>)+>
| <#DIGIT: ["0"-"9"]>
| <CLOSE01: "(">
| <CLOSE02: ")">
| <CLOSE11: "{">
| <CLOSE12: "}">
| <CLOSE21: "[">
| <CLOSE22: "]">
| <SEMICOLON: ";">
| <DOT: ".">
| <EQUALS: "=">
| <CMPEQUALS: "==">
| <CMPNEQUALS: "!=">
| <GTHAN: ">">
| <STHAN: "<">
| <PLUS: "+">
| <MINUS: "-">
| <MULTIPLY: "*">
| <DIVIDE: "/">
| <OTHER: ~[]>
}

//RESERVED WORDS
TOKEN : {
<ABSTRACT: "abstract">
| <ASSERT: "assert">
| <BOOLEAN: "boolean">
| <BREAK: "break">
| <BYTE: "byte">
| <CASE: "case">
| <CATCH: "catch">
| <CHAR: "char">
| <CLASSS: "class">
| <CONST: "const">
| <CONTINUE: "continue">
| <DEFAULT: "default">
| <DO: "do">
| <DOUBLE: "double">
| <ELSE: "else">
| <ENUM: "enum">
| <EXTENDS: "extends">
| <FINAL: "final">
| <FINALLY: "finally">
| <FLOAT: "float">
| <FOR: "for">
| <GOTO: "goto">
| <IF: "if">
| <IMPLEMENTS: "implements">
| <IMPORT: "import">
| <INSTANCEOF: "instanceof">
| <INT: "int">
| <INTERFACE: "interface">
| <LONG: "long">
| <NATIVE: "native">
| <NEW: "new">
| <PACKAGE: "package">
| <PRIVATE: "private">
| <PROTECTED: "protected">
| <PUBLIC: "public">
| <RETURN: "return">
| <SHORT: "short">
| <STATIC: "static">
| <STRICTFP: "strictfp">
| <SUPER: "super">
| <SWITCH: "switch">
| <SYNCHRONIZED: "synchronized">
| <THIS: "this">
| <THROW: "throw">
| <THROWS: "throws">
| <TRANSIENT: "transient">
| <TRY: "try">
| <VOID: "void">
| <VOLATILE: "volatile">
| <WHILE: "while">
}

//IDENTIFIER TOKEN
TOKEN : {
 <IDENTIFIER: (<LETTER> | "_")(<LETTER> | <DIGIT> | "_")*>
|  <#LETTER: (["a"-"z","A"-"Z"])>
}

//MAIN UNIT
void Start () : {}
{
  (
    INTEGER_CONSTANT | STRING_CONSTANT | LOGIC_CONSTANT |
    NOT | IF | END | SUB | LET | CALL | THEN | CASE | ELSE | INPUT | PRINT | SELECT | STATIC |
    IDENTIFIER
  )*
  <EOF>
}